name: Run PhantomBuster and Upload to S3

on:
  workflow_dispatch:

jobs:
  run-phantombuster:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Dependencies
        run: |
          npm init -y
          npm install axios aws-sdk

      - name: Run PhantomBuster and Upload to S3
        run: |
          node <<'EOF'
          const axios = require('axios');
          const fs = require('fs');
          const AWS = require('aws-sdk');

          const apiKey = '6yYcfWE6vtYMfo7FkkwPCgd4yn851XiTIgwpjudSau0';
          const agentId = '3803367026851739';
          const accessKeyId = 'AKIA472NH4QZCR7AFFDJ';
          const secretAccessKey = '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';
          const bucketName = 'phantombusterdata';

          async function run() {
            const launchRes = await axios.post(
              'https://api.phantombuster.com/api/v2/agents/launch',
              { id: agentId },
              { headers: { 'X-Phantombuster-Key-1': apiKey } }
            );

            const containerId = launchRes.data.containerId;
            console.log("üöÄ Launched agent with container ID:", containerId);

            await new Promise(r => setTimeout(r, 20000)); // wait for execution

            const resultRes = await axios.get(
              `https://api.phantombuster.com/api/v2/containers/fetch-output?id=${containerId}`,
              { headers: { 'X-Phantombuster-Key-1': apiKey } }
            );

            const output = JSON.stringify(resultRes.data, null, 2);
            const filename = "phantom_output.json";
            fs.writeFileSync(filename, output);
            console.log("‚úÖ Output saved locally:", filename);

            const s3 = new AWS.S3({ accessKeyId, secretAccessKey });

            const uploadParams = {
              Bucket: bucketName,
              Key: `phantom-data/phantom_output_${Date.now()}.json`,
              Body: output,
              ContentType: "application/json"
            };

            await s3.upload(uploadParams).promise();
            console.log("‚úÖ Uploaded to S3:", uploadParams.Key);
          }

          run().catch(err => {
            console.error("‚ùå Error:", err);
            process.exit(1);
          });
          EOF
